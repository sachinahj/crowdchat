<!DOCTYPE html>
<html>
  <head>
    <title>CrowdChat</title>

    <!-- <meta name="viewport" content="width=device-width, user-scalable=no" /> -->
    <meta content="yes" name="apple-mobile-web-app-capable" />
    <meta content="minimum-scale=1.0, width=device-width, maximum-scale=1, user-scalable=no" name="viewport" />

    <link rel='stylesheet' href='stylesheets/bootstrap/bootstrap.css' />
    <link rel='stylesheet' href='stylesheets/crowd-surf.css' />

  </head>
  <body>

    <div class="row top-bar">
      <div class="col-md-12 col-sm-12 col-xs-12">
        <div class="row text-center">
          <img class="top-bar-logo" src="/images/logo.png" />
          <button type="submit" id="crowd-surf-start-button"class="btn btn-primary btn-sm pull-right submit-button" onclick="createNewPerson()">START</button>
        </div>
      </div>
    </div>


    <div class="container">
      <div class="row">
          <div class="col-md-12 col-sm-12 col-xs-12">
            <center>
              <div id="crowd-surf-map-canvas"></div>
            </center>
          </div>
      </div>
    </div>


    <!-- jquery -->
    <script type="text/javascript" src="javascripts/jquery-2.1.1.min.js"></script>
    <script type="text/javascript" src="javascripts/underscore.js"></script>
    <!-- bootstrap -->
    <script type="text/javascript" src="javascripts/bootstrap/bootstrap.js"></script>
    
    <!-- angular app and controllers -->
    <script type="text/javascript"
      src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCOnpZgn-7iSwcokSBUF8qM-BC2kbrC-v8">
    </script>

    <script type="text/javascript" src="javascripts/crowd-surf/initialize_map.js"></script>
    <script type="text/javascript" src="javascripts/crowd-surf/colors.js"></script>

    <script type="text/javascript">

      var all_crowds = [];

      var createNewPerson = function () {

        window.map_bounds = google_map.getBounds();
        window.map_zoom = google_map.getZoom();

        var location = getRandomPersonLocation();
        var user = new User(location);
        user.place_marker();

        var crowd = findCrowdForUser(user);
        var crowd = mergeCrowds(crowd);

        crowd.draw_circle();

      }

      // ENTITIES
      // counters
      var user_id_counter = 1;
      var crowd_id_counter = 1;

      // User entity
      function User (location) {
        // id
        this.id = user_id_counter;
        user_id_counter += 1;

        // location attributes
        this.location = {
          latitude: location.latitude,
          longitude: location.longitude
        };
        
        // map attributes and functions
        this.marker = null;
        this.place_marker = function () {
          var center = new google.maps.LatLng(
            this.location.latitude,
            this.location.longitude
          );
          var icon = {
            url: "images/crowd-person.png",
            scaledSize: new google.maps.Size(map_zoom/2, map_zoom/2)
          };
          var marker = new google.maps.Marker({
            position: center,
            map: google_map,
            icon: icon
          });
          this.marker = marker;
          return true;
        }
        this.remove_marker = function () {
          this.marker.setMap(null);
          this.marker = null;
          return true;
        }

      }

      // Crowd entity
      function Crowd (user) {
        // id
        this.id = crowd_id_counter;
        crowd_id_counter += 1;

        // users
        this.users = [user];

        // location attributes
        this.location = {
          latitude: user.location.latitude,
          longitude: user.location.longitude
        }

        this.radius = 0.09144;
        this.recalculate_location = function () {
          var length = this.users.length;

          var x_sum = 0;
          var y_sum = 0;
          var z_sum = 0;
          for (var i = 0; i < length; i++) {
            x_sum +=  Math.cos(this.users[i].location.latitude.toRad()) * 
                      Math.cos(this.users[i].location.longitude.toRad());

            y_sum +=  Math.cos(this.users[i].location.latitude.toRad()) * 
                      Math.sin(this.users[i].location.longitude.toRad());

            z_sum +=  Math.sin(this.users[i].location.latitude.toRad());
          }
          x_sum = x_sum / length;
          y_sum = y_sum / length;
          z_sum = z_sum / length;
          var hyp = Math.sqrt(x_sum * x_sum + y_sum * y_sum);

          this.location.latitude = Math.atan2(z_sum, hyp).toDeg();
          this.location.longitude = Math.atan2(y_sum, x_sum).toDeg();

          var max_distance = 0;
          var distance;
          for (var i = 0; i < length; i++) {
            distance = distanceBetweenUsersCrowds(this, this.users[i]);
            if (distance > max_distance){
              max_distance = distance;
            }
          }
          this.radius = max_distance + 0.09144;
          return true;

        }
        
        // map attributes and functions
        this.color = _.sample(colors, 1)[0];
        this.circle = null;
        this.draw_circle = function () {
          if (this.circle) {
            this.remove_circle();
          }
          var center = new google.maps.LatLng(
            this.location.latitude,
            this.location.longitude
          );
          var circle_options = {
            strokeColor: this.color,
            strokeOpacity: 1.0,
            strokeWeight: 0.5,
            fillColor: this.color,
            fillOpacity: 0.25,
            map: google_map,
            center: center,
            radius: (this.radius * 1000)
          };
          var circle = new google.maps.Circle(circle_options);
          this.circle = circle;
          return true;
        }
        this.remove_circle = function () {
          this.circle.setMap(null);
          this.circle = null;
          return true;
        }


      }










      // HELPER FUNCTIONS

      // to rad prototype function
      Number.prototype.toRad = function() {
         return this * Math.PI / 180;
      }
      // to deg prototype function
      Number.prototype.toDeg = function() {
         return this * 180 / Math.PI;
      }

      // get random location for new person
      function getRandomPersonLocation () {
        var north_lat = map_bounds.getNorthEast().lat();
        var south_lat = map_bounds.getSouthWest().lat();
        var east_lng = map_bounds.getNorthEast().lng();
        var west_lng = map_bounds.getSouthWest().lng();
        var rand_lat = (Math.random() * (north_lat - south_lat) + south_lat);
        var rand_lng = (Math.random() * (east_lng - west_lng) + west_lng);

        return {
          latitude: rand_lat,
          longitude: rand_lng
        };
      }

      // find crowd within distance from user
      function findCrowdForUser (user) {
        var all_crowds_length = all_crowds.length
        var distance;
        var radius_difference;
        for (var i = 0; i < all_crowds_length; i++) {
          distance = distanceBetweenUsersCrowds(user, all_crowds[i]);
          if (distance < (all_crowds[i].radius + 0.09144)) {
            all_crowds[i].users.push(user);
            all_crowds[i].recalculate_location();

            var crowd = all_crowds[i]
            return crowd;
          }
        }

        var crowd = new Crowd(user);
        all_crowds.push(crowd);
        return crowd;
      }

      // distance formula between two lat/lng points
      function distanceBetweenUsersCrowds (user_crowd_1, user_crowd_2) {
        var lat1 = user_crowd_1.location.latitude;
        var lon1 = user_crowd_1.location.longitude;
        var lat2 = user_crowd_2.location.latitude;
        var lon2 = user_crowd_2.location.longitude;
        var R =  6371; // km 
        var x1 = lat2-lat1;
        var dLat = x1.toRad();  
        var x2 = lon2-lon1;
        var dLon = x2.toRad();  
        var a = Math.sin(dLat/2) * Math.sin(dLat/2) + 
                Math.cos(lat1.toRad()) * Math.cos(lat2.toRad()) * 
                Math.sin(dLon/2) * Math.sin(dLon/2);  
        var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); 
        var d = R * c; 
        return d;
      }

      function mergeCrowds(crowd) {
        return crowd;
      }







    </script>
  <body>
</html>
